please generate the python code to create table in MySQL environment
please assume that the database configuration code is in separate file with name db_config:
db_config = {
    'host': 'localhost',
    'user': 'your_username',
    'password': 'your_password',
    'database': 'your_database_name'
}
please import db_config var to the file where will be the code for table

dates_list (it will contain the list of the dates and various descriptions of each date will be filled up by default automatically by dates from 01/01/2023 till today + 30 days)
- date (ex. 01/01/2023)
- year (ex. 2023)
- quarter_name (ex. q-1)
- month_number (ex. 01)
- month_name (ex. Janary
- day_of_month_number (ex. 01)
- day_of_week_number (ex. 07)
- day_of_week_name (ex. Sunday)
- weekending (ex. Friday 01/06/2023)

license (it will contain the users credentials and information about his license)
- id_license (creating the id automatically with adding new user)
- id_user (creating the id automatically with adding new user)
- first_name (needed to be as a requested/mandatory value before creating new user.)
- last_name (needed to be as a requested/mandatory value before creating new user.)
- user_role 
- user_timezone (needed to be as a requested/mandatory value before creating new user. will have a dropdown on the frontend with listed timezones)
- user_email (needed to be as a requested/mandatory value before creating new user. on the frontend side need to have a validation (will be invalid untill "@" character. also will be requested to sign in)
- user_password (needed to be as a requested/mandatory value before creating new user. on the frontend side need to have a validation (will be invalid untill there will be at least 4 characters. also will be requested to sign in)
- company_name (needed to be as a requested/mandatory value before creating new user. if company name will be already existng on the platform new user will be assigned to that license)
- company_industry (needed to be as a requested/not mandatory value before creating new user. will have a dropdown on the frontend with listed industries)
- company_size (needed to be as a requested/not mandatory value before creating new user. will have a dropdown on the frontend with listed company sizes ranges) 
- domain (needed to be as a requested/mandatory value before creating new user. if domain will be already existng on the platform new user will be assigned to that license)
- created_at (date when license was created)


there will be 3 tables that will consider the information about the campaign. it all will be linked to the call table through id_call column. after creating the campaign - there will be an ability to upload calls (data that will be analyzed)


campaign
- id_campaign (will be created automatically after creating the campaign)
- context (needed to be as a requested/mandatory value before creating new campaign, on the frontend side)
- campaign_name (needed to be as a requested/mandatory value before creating new campaign, on the frontend side. needed validation there cant be 2 campaigns with the same campaign name in 1 license)
- id_call (by default it is blank. after importing the calls from the frontend side script is checking the campaign id and assigning the campaign id to each call. so there will be 1 id_call and number of id_campaign equal to the number of uploaded calls)
- created_at (datetime when the campaign was created)

categories
- id_category (will be created automatically during creating the category)
- category_name (needed to be as a requested/mandatory value before creating new category, on the frontend side. needed validation there cant be 2 categories with the same category name in 1 license)
- id_campaign (will be assigned automatically during creating the campaign)
- id_call (by default it is blank. after importing the calls assigning the category id to each call. so there will be number that will be equal to number of categories for each id_call and number of id_categories (number of id_call * number of categories))
- created_at (datetime when the category was created)

parameters
- id_category (will be assigned automatically during creating the campaign) 
- id_parameter (will be created automatically during creating the campaign)
- parameter_name (it will be the questions that will be answered by the script. needed to be as a requested/mandatory value before creating new category, on the frontend side. needed validation there cant be 2 categories with the same category name in 1 license)
- parameter_reply (answers)
- id_call (by default it is blank. after importing the calls assigning the parameter id to each call. so there will be number that will be equal to number of parameters for each id_call and number of id_parameter (number of id_call * number of parameters))
- created_at (datetime when the parameter was created)

import-export of the calls will be implementedby uploading to the platform the csv file with the list of the calls. after initiation of the import by the user on the frontend side - there will be a csv file with the template of the file that need to be uploaded. all data will be stored in the call table. import and wxport tables will be only for showing the dependences of calls import and export


import
- id_import
- id_user
- file_name
- count_of_rows
- count_of_valid_rows
- imported_at

import_calls (the table that will describe the depence between call and import entities)
- id_import
- id_call

export
- id_export
- id_user
- file_name
- count_of_rows
- count_of_valid_rows
- exported_at

export_calls (the table that will describe the depence between call and export entities)
- id_export
- id_call

call (initial data about the calls)
- id_call (will be assigned automatically during import) 
- id_user (the user who uploaded the call)
- date (date of the call - will be provided by user)
- time (time of the call - will be provided by user)
- call_duration (duration of the call in seconds - will be provided by user)
- call_disposition (will be provided by user)
- caller_name (will be provided by user)
- id_caller (will be assigned automatically during import) 
- prospect_name (will be provided by user)
- id_prospect (will be assigned automatically during import)
- recording_url (will be provided by user)
- recording_transliteration (will be provided by user)
- id_campaign (will be provided by user. during the upload will be choosen from the list of already created campaigns)

db_config = {
    'host': 'localhost',
    'user': 'your_username',
    'password': 'your_password',
    'database': 'your_database_name'
}

hours 
please generate the python code to create table in MySQL environment
table - hours (it will be filled up with: in columns all timezones and in rows time with 30 min gap (ex. row1 - 00:00:00AM row2 - 00:15:00AM and so on).
(it will contain hours with +15 min from previous time (ex. row1 - 00:00:00AM row2 - 00:15:00AM and so on. in the columns it will have the same time but in other timezone). columns:
- hourUTC12 (by default 12:00:00PM)
- hourUTC11 (by default 1:00:00PM)
- hourUTC10 (by default 2:00:00PM)
- hourUTC9 (by default 3:00:00PM)
- hourUTC8 (by default 4:00:00PM)
- hourUTC7 (by default 5:00:00PM)
- hourUTC6 (by default 6:00:00PM)
- hourUTC5 (by default 7:00:00PM)
- hourUTC4 (by default 8:00:00PM)
- hourUTC3 (by default 9:00:00PM)
- hourUTC2 (by default 10:00:00PM)
- hourUTC1 (by default 11:00:00PM)
- hourUTC (by default 12:00:00AM)
- hour1UTC (by default 1:00:00AM)
- hour2UTC (by default 2:00:00AM)
- hour3UTC (by default 3:00:00AM)
- hour4UTC (by default 4:00:00AM)
- hour5UTC (by default 5:00:00AM)
- hour6UTC (by default 6:00:00AM)
- hour7UTC (by default 7:00:00AM)
- hour8UTC (by default 8:00:00AM)
- hour9UTC (by default 9:00:00AM)
- hour10UTC (by default 10:00:00AM)
- hour11UTC (by default 11:00:00AM)